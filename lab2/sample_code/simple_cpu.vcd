$date
	Wed May 13 16:52:49 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module TestBench $end
$scope module cpu $end
$var wire 1 ! clk_i $end
$var wire 1 " pointer $end
$var wire 1 # rst_i $end
$var wire 1 $ zero $end
$var wire 1 % z_re $end
$var wire 5 & wr_reg [4:0] $end
$var wire 32 ' wr_data [31:0] $end
$var wire 32 ( signex [31:0] $end
$var wire 32 ) shift_result [31:0] $end
$var wire 32 * se_ls_2 [31:0] $end
$var wire 32 + rt_to_alu [31:0] $end
$var wire 32 , rs_to_alu [31:0] $end
$var wire 1 - regwri $end
$var wire 1 . regdst $end
$var wire 32 / pc_to_instr [31:0] $end
$var wire 32 0 pc_temp2 [31:0] $end
$var wire 32 1 pc_temp1 [31:0] $end
$var wire 32 2 pc_in_i [31:0] $end
$var wire 32 3 instructions [31:0] $end
$var wire 1 4 br $end
$var wire 1 5 alusrc $end
$var wire 3 6 aluop [2:0] $end
$var wire 4 7 aluctrl [3:0] $end
$var wire 32 8 alu_result [31:0] $end
$var wire 32 9 alu_data2 [31:0] $end
$scope module AC $end
$var wire 4 : ALUCtrl_o [3:0] $end
$var wire 6 ; funct_i [5:0] $end
$var wire 3 < ALUOp_i [2:0] $end
$var reg 4 = ALUCtrl_in_o [3:0] $end
$upscope $end
$scope module ALU $end
$var wire 4 > ctrl_i [3:0] $end
$var wire 1 $ zero_o $end
$var wire 32 ? src2_i [31:0] $end
$var wire 32 @ src1_i [31:0] $end
$var wire 32 A result_o [31:0] $end
$var wire 1 B overflow $end
$var wire 1 C cout $end
$var wire 3 D alu_op [2:0] $end
$scope module alu32bit $end
$var wire 4 E ALU_control [3:0] $end
$var wire 1 F equal $end
$var wire 1 $ zero $end
$var wire 32 G src2 [31:0] $end
$var wire 32 H src1 [31:0] $end
$var wire 1 I set $end
$var wire 32 J result [31:0] $end
$var wire 1 B overflow $end
$var wire 32 K less [31:0] $end
$var wire 32 L eq [31:0] $end
$var wire 1 C cout $end
$var wire 32 M carry [31:0] $end
$var wire 3 N ALU_op [2:0] $end
$var reg 1 O real_set $end
$scope begin label[1] $end
$scope module alun $end
$var wire 1 P A_invert $end
$var wire 1 Q B_invert $end
$var wire 1 R cin $end
$var wire 1 S cout $end
$var wire 1 T eq $end
$var wire 1 U less $end
$var wire 1 V m1 $end
$var wire 1 W m2 $end
$var wire 1 X op1 $end
$var wire 1 Y op2 $end
$var wire 1 Z op3 $end
$var wire 1 [ op4 $end
$var wire 2 \ operation [1:0] $end
$var wire 1 ] src1 $end
$var wire 1 ^ src2 $end
$var reg 1 _ result $end
$upscope $end
$upscope $end
$scope begin label[2] $end
$scope module alun $end
$var wire 1 ` A_invert $end
$var wire 1 a B_invert $end
$var wire 1 b cin $end
$var wire 1 c cout $end
$var wire 1 d eq $end
$var wire 1 e less $end
$var wire 1 f m1 $end
$var wire 1 g m2 $end
$var wire 1 h op1 $end
$var wire 1 i op2 $end
$var wire 1 j op3 $end
$var wire 1 k op4 $end
$var wire 2 l operation [1:0] $end
$var wire 1 m src1 $end
$var wire 1 n src2 $end
$var reg 1 o result $end
$upscope $end
$upscope $end
$scope begin label[3] $end
$scope module alun $end
$var wire 1 p A_invert $end
$var wire 1 q B_invert $end
$var wire 1 r cin $end
$var wire 1 s cout $end
$var wire 1 t eq $end
$var wire 1 u less $end
$var wire 1 v m1 $end
$var wire 1 w m2 $end
$var wire 1 x op1 $end
$var wire 1 y op2 $end
$var wire 1 z op3 $end
$var wire 1 { op4 $end
$var wire 2 | operation [1:0] $end
$var wire 1 } src1 $end
$var wire 1 ~ src2 $end
$var reg 1 !" result $end
$upscope $end
$upscope $end
$scope begin label[4] $end
$scope module alun $end
$var wire 1 "" A_invert $end
$var wire 1 #" B_invert $end
$var wire 1 $" cin $end
$var wire 1 %" cout $end
$var wire 1 &" eq $end
$var wire 1 '" less $end
$var wire 1 (" m1 $end
$var wire 1 )" m2 $end
$var wire 1 *" op1 $end
$var wire 1 +" op2 $end
$var wire 1 ," op3 $end
$var wire 1 -" op4 $end
$var wire 2 ." operation [1:0] $end
$var wire 1 /" src1 $end
$var wire 1 0" src2 $end
$var reg 1 1" result $end
$upscope $end
$upscope $end
$scope begin label[5] $end
$scope module alun $end
$var wire 1 2" A_invert $end
$var wire 1 3" B_invert $end
$var wire 1 4" cin $end
$var wire 1 5" cout $end
$var wire 1 6" eq $end
$var wire 1 7" less $end
$var wire 1 8" m1 $end
$var wire 1 9" m2 $end
$var wire 1 :" op1 $end
$var wire 1 ;" op2 $end
$var wire 1 <" op3 $end
$var wire 1 =" op4 $end
$var wire 2 >" operation [1:0] $end
$var wire 1 ?" src1 $end
$var wire 1 @" src2 $end
$var reg 1 A" result $end
$upscope $end
$upscope $end
$scope begin label[6] $end
$scope module alun $end
$var wire 1 B" A_invert $end
$var wire 1 C" B_invert $end
$var wire 1 D" cin $end
$var wire 1 E" cout $end
$var wire 1 F" eq $end
$var wire 1 G" less $end
$var wire 1 H" m1 $end
$var wire 1 I" m2 $end
$var wire 1 J" op1 $end
$var wire 1 K" op2 $end
$var wire 1 L" op3 $end
$var wire 1 M" op4 $end
$var wire 2 N" operation [1:0] $end
$var wire 1 O" src1 $end
$var wire 1 P" src2 $end
$var reg 1 Q" result $end
$upscope $end
$upscope $end
$scope begin label[7] $end
$scope module alun $end
$var wire 1 R" A_invert $end
$var wire 1 S" B_invert $end
$var wire 1 T" cin $end
$var wire 1 U" cout $end
$var wire 1 V" eq $end
$var wire 1 W" less $end
$var wire 1 X" m1 $end
$var wire 1 Y" m2 $end
$var wire 1 Z" op1 $end
$var wire 1 [" op2 $end
$var wire 1 \" op3 $end
$var wire 1 ]" op4 $end
$var wire 2 ^" operation [1:0] $end
$var wire 1 _" src1 $end
$var wire 1 `" src2 $end
$var reg 1 a" result $end
$upscope $end
$upscope $end
$scope begin label[8] $end
$scope module alun $end
$var wire 1 b" A_invert $end
$var wire 1 c" B_invert $end
$var wire 1 d" cin $end
$var wire 1 e" cout $end
$var wire 1 f" eq $end
$var wire 1 g" less $end
$var wire 1 h" m1 $end
$var wire 1 i" m2 $end
$var wire 1 j" op1 $end
$var wire 1 k" op2 $end
$var wire 1 l" op3 $end
$var wire 1 m" op4 $end
$var wire 2 n" operation [1:0] $end
$var wire 1 o" src1 $end
$var wire 1 p" src2 $end
$var reg 1 q" result $end
$upscope $end
$upscope $end
$scope begin label[9] $end
$scope module alun $end
$var wire 1 r" A_invert $end
$var wire 1 s" B_invert $end
$var wire 1 t" cin $end
$var wire 1 u" cout $end
$var wire 1 v" eq $end
$var wire 1 w" less $end
$var wire 1 x" m1 $end
$var wire 1 y" m2 $end
$var wire 1 z" op1 $end
$var wire 1 {" op2 $end
$var wire 1 |" op3 $end
$var wire 1 }" op4 $end
$var wire 2 ~" operation [1:0] $end
$var wire 1 !# src1 $end
$var wire 1 "# src2 $end
$var reg 1 ## result $end
$upscope $end
$upscope $end
$scope begin label[10] $end
$scope module alun $end
$var wire 1 $# A_invert $end
$var wire 1 %# B_invert $end
$var wire 1 &# cin $end
$var wire 1 '# cout $end
$var wire 1 (# eq $end
$var wire 1 )# less $end
$var wire 1 *# m1 $end
$var wire 1 +# m2 $end
$var wire 1 ,# op1 $end
$var wire 1 -# op2 $end
$var wire 1 .# op3 $end
$var wire 1 /# op4 $end
$var wire 2 0# operation [1:0] $end
$var wire 1 1# src1 $end
$var wire 1 2# src2 $end
$var reg 1 3# result $end
$upscope $end
$upscope $end
$scope begin label[11] $end
$scope module alun $end
$var wire 1 4# A_invert $end
$var wire 1 5# B_invert $end
$var wire 1 6# cin $end
$var wire 1 7# cout $end
$var wire 1 8# eq $end
$var wire 1 9# less $end
$var wire 1 :# m1 $end
$var wire 1 ;# m2 $end
$var wire 1 <# op1 $end
$var wire 1 =# op2 $end
$var wire 1 ># op3 $end
$var wire 1 ?# op4 $end
$var wire 2 @# operation [1:0] $end
$var wire 1 A# src1 $end
$var wire 1 B# src2 $end
$var reg 1 C# result $end
$upscope $end
$upscope $end
$scope begin label[12] $end
$scope module alun $end
$var wire 1 D# A_invert $end
$var wire 1 E# B_invert $end
$var wire 1 F# cin $end
$var wire 1 G# cout $end
$var wire 1 H# eq $end
$var wire 1 I# less $end
$var wire 1 J# m1 $end
$var wire 1 K# m2 $end
$var wire 1 L# op1 $end
$var wire 1 M# op2 $end
$var wire 1 N# op3 $end
$var wire 1 O# op4 $end
$var wire 2 P# operation [1:0] $end
$var wire 1 Q# src1 $end
$var wire 1 R# src2 $end
$var reg 1 S# result $end
$upscope $end
$upscope $end
$scope begin label[13] $end
$scope module alun $end
$var wire 1 T# A_invert $end
$var wire 1 U# B_invert $end
$var wire 1 V# cin $end
$var wire 1 W# cout $end
$var wire 1 X# eq $end
$var wire 1 Y# less $end
$var wire 1 Z# m1 $end
$var wire 1 [# m2 $end
$var wire 1 \# op1 $end
$var wire 1 ]# op2 $end
$var wire 1 ^# op3 $end
$var wire 1 _# op4 $end
$var wire 2 `# operation [1:0] $end
$var wire 1 a# src1 $end
$var wire 1 b# src2 $end
$var reg 1 c# result $end
$upscope $end
$upscope $end
$scope begin label[14] $end
$scope module alun $end
$var wire 1 d# A_invert $end
$var wire 1 e# B_invert $end
$var wire 1 f# cin $end
$var wire 1 g# cout $end
$var wire 1 h# eq $end
$var wire 1 i# less $end
$var wire 1 j# m1 $end
$var wire 1 k# m2 $end
$var wire 1 l# op1 $end
$var wire 1 m# op2 $end
$var wire 1 n# op3 $end
$var wire 1 o# op4 $end
$var wire 2 p# operation [1:0] $end
$var wire 1 q# src1 $end
$var wire 1 r# src2 $end
$var reg 1 s# result $end
$upscope $end
$upscope $end
$scope begin label[15] $end
$scope module alun $end
$var wire 1 t# A_invert $end
$var wire 1 u# B_invert $end
$var wire 1 v# cin $end
$var wire 1 w# cout $end
$var wire 1 x# eq $end
$var wire 1 y# less $end
$var wire 1 z# m1 $end
$var wire 1 {# m2 $end
$var wire 1 |# op1 $end
$var wire 1 }# op2 $end
$var wire 1 ~# op3 $end
$var wire 1 !$ op4 $end
$var wire 2 "$ operation [1:0] $end
$var wire 1 #$ src1 $end
$var wire 1 $$ src2 $end
$var reg 1 %$ result $end
$upscope $end
$upscope $end
$scope begin label[16] $end
$scope module alun $end
$var wire 1 &$ A_invert $end
$var wire 1 '$ B_invert $end
$var wire 1 ($ cin $end
$var wire 1 )$ cout $end
$var wire 1 *$ eq $end
$var wire 1 +$ less $end
$var wire 1 ,$ m1 $end
$var wire 1 -$ m2 $end
$var wire 1 .$ op1 $end
$var wire 1 /$ op2 $end
$var wire 1 0$ op3 $end
$var wire 1 1$ op4 $end
$var wire 2 2$ operation [1:0] $end
$var wire 1 3$ src1 $end
$var wire 1 4$ src2 $end
$var reg 1 5$ result $end
$upscope $end
$upscope $end
$scope begin label[17] $end
$scope module alun $end
$var wire 1 6$ A_invert $end
$var wire 1 7$ B_invert $end
$var wire 1 8$ cin $end
$var wire 1 9$ cout $end
$var wire 1 :$ eq $end
$var wire 1 ;$ less $end
$var wire 1 <$ m1 $end
$var wire 1 =$ m2 $end
$var wire 1 >$ op1 $end
$var wire 1 ?$ op2 $end
$var wire 1 @$ op3 $end
$var wire 1 A$ op4 $end
$var wire 2 B$ operation [1:0] $end
$var wire 1 C$ src1 $end
$var wire 1 D$ src2 $end
$var reg 1 E$ result $end
$upscope $end
$upscope $end
$scope begin label[18] $end
$scope module alun $end
$var wire 1 F$ A_invert $end
$var wire 1 G$ B_invert $end
$var wire 1 H$ cin $end
$var wire 1 I$ cout $end
$var wire 1 J$ eq $end
$var wire 1 K$ less $end
$var wire 1 L$ m1 $end
$var wire 1 M$ m2 $end
$var wire 1 N$ op1 $end
$var wire 1 O$ op2 $end
$var wire 1 P$ op3 $end
$var wire 1 Q$ op4 $end
$var wire 2 R$ operation [1:0] $end
$var wire 1 S$ src1 $end
$var wire 1 T$ src2 $end
$var reg 1 U$ result $end
$upscope $end
$upscope $end
$scope begin label[19] $end
$scope module alun $end
$var wire 1 V$ A_invert $end
$var wire 1 W$ B_invert $end
$var wire 1 X$ cin $end
$var wire 1 Y$ cout $end
$var wire 1 Z$ eq $end
$var wire 1 [$ less $end
$var wire 1 \$ m1 $end
$var wire 1 ]$ m2 $end
$var wire 1 ^$ op1 $end
$var wire 1 _$ op2 $end
$var wire 1 `$ op3 $end
$var wire 1 a$ op4 $end
$var wire 2 b$ operation [1:0] $end
$var wire 1 c$ src1 $end
$var wire 1 d$ src2 $end
$var reg 1 e$ result $end
$upscope $end
$upscope $end
$scope begin label[20] $end
$scope module alun $end
$var wire 1 f$ A_invert $end
$var wire 1 g$ B_invert $end
$var wire 1 h$ cin $end
$var wire 1 i$ cout $end
$var wire 1 j$ eq $end
$var wire 1 k$ less $end
$var wire 1 l$ m1 $end
$var wire 1 m$ m2 $end
$var wire 1 n$ op1 $end
$var wire 1 o$ op2 $end
$var wire 1 p$ op3 $end
$var wire 1 q$ op4 $end
$var wire 2 r$ operation [1:0] $end
$var wire 1 s$ src1 $end
$var wire 1 t$ src2 $end
$var reg 1 u$ result $end
$upscope $end
$upscope $end
$scope begin label[21] $end
$scope module alun $end
$var wire 1 v$ A_invert $end
$var wire 1 w$ B_invert $end
$var wire 1 x$ cin $end
$var wire 1 y$ cout $end
$var wire 1 z$ eq $end
$var wire 1 {$ less $end
$var wire 1 |$ m1 $end
$var wire 1 }$ m2 $end
$var wire 1 ~$ op1 $end
$var wire 1 !% op2 $end
$var wire 1 "% op3 $end
$var wire 1 #% op4 $end
$var wire 2 $% operation [1:0] $end
$var wire 1 %% src1 $end
$var wire 1 &% src2 $end
$var reg 1 '% result $end
$upscope $end
$upscope $end
$scope begin label[22] $end
$scope module alun $end
$var wire 1 (% A_invert $end
$var wire 1 )% B_invert $end
$var wire 1 *% cin $end
$var wire 1 +% cout $end
$var wire 1 ,% eq $end
$var wire 1 -% less $end
$var wire 1 .% m1 $end
$var wire 1 /% m2 $end
$var wire 1 0% op1 $end
$var wire 1 1% op2 $end
$var wire 1 2% op3 $end
$var wire 1 3% op4 $end
$var wire 2 4% operation [1:0] $end
$var wire 1 5% src1 $end
$var wire 1 6% src2 $end
$var reg 1 7% result $end
$upscope $end
$upscope $end
$scope begin label[23] $end
$scope module alun $end
$var wire 1 8% A_invert $end
$var wire 1 9% B_invert $end
$var wire 1 :% cin $end
$var wire 1 ;% cout $end
$var wire 1 <% eq $end
$var wire 1 =% less $end
$var wire 1 >% m1 $end
$var wire 1 ?% m2 $end
$var wire 1 @% op1 $end
$var wire 1 A% op2 $end
$var wire 1 B% op3 $end
$var wire 1 C% op4 $end
$var wire 2 D% operation [1:0] $end
$var wire 1 E% src1 $end
$var wire 1 F% src2 $end
$var reg 1 G% result $end
$upscope $end
$upscope $end
$scope begin label[24] $end
$scope module alun $end
$var wire 1 H% A_invert $end
$var wire 1 I% B_invert $end
$var wire 1 J% cin $end
$var wire 1 K% cout $end
$var wire 1 L% eq $end
$var wire 1 M% less $end
$var wire 1 N% m1 $end
$var wire 1 O% m2 $end
$var wire 1 P% op1 $end
$var wire 1 Q% op2 $end
$var wire 1 R% op3 $end
$var wire 1 S% op4 $end
$var wire 2 T% operation [1:0] $end
$var wire 1 U% src1 $end
$var wire 1 V% src2 $end
$var reg 1 W% result $end
$upscope $end
$upscope $end
$scope begin label[25] $end
$scope module alun $end
$var wire 1 X% A_invert $end
$var wire 1 Y% B_invert $end
$var wire 1 Z% cin $end
$var wire 1 [% cout $end
$var wire 1 \% eq $end
$var wire 1 ]% less $end
$var wire 1 ^% m1 $end
$var wire 1 _% m2 $end
$var wire 1 `% op1 $end
$var wire 1 a% op2 $end
$var wire 1 b% op3 $end
$var wire 1 c% op4 $end
$var wire 2 d% operation [1:0] $end
$var wire 1 e% src1 $end
$var wire 1 f% src2 $end
$var reg 1 g% result $end
$upscope $end
$upscope $end
$scope begin label[26] $end
$scope module alun $end
$var wire 1 h% A_invert $end
$var wire 1 i% B_invert $end
$var wire 1 j% cin $end
$var wire 1 k% cout $end
$var wire 1 l% eq $end
$var wire 1 m% less $end
$var wire 1 n% m1 $end
$var wire 1 o% m2 $end
$var wire 1 p% op1 $end
$var wire 1 q% op2 $end
$var wire 1 r% op3 $end
$var wire 1 s% op4 $end
$var wire 2 t% operation [1:0] $end
$var wire 1 u% src1 $end
$var wire 1 v% src2 $end
$var reg 1 w% result $end
$upscope $end
$upscope $end
$scope begin label[27] $end
$scope module alun $end
$var wire 1 x% A_invert $end
$var wire 1 y% B_invert $end
$var wire 1 z% cin $end
$var wire 1 {% cout $end
$var wire 1 |% eq $end
$var wire 1 }% less $end
$var wire 1 ~% m1 $end
$var wire 1 !& m2 $end
$var wire 1 "& op1 $end
$var wire 1 #& op2 $end
$var wire 1 $& op3 $end
$var wire 1 %& op4 $end
$var wire 2 && operation [1:0] $end
$var wire 1 '& src1 $end
$var wire 1 (& src2 $end
$var reg 1 )& result $end
$upscope $end
$upscope $end
$scope begin label[28] $end
$scope module alun $end
$var wire 1 *& A_invert $end
$var wire 1 +& B_invert $end
$var wire 1 ,& cin $end
$var wire 1 -& cout $end
$var wire 1 .& eq $end
$var wire 1 /& less $end
$var wire 1 0& m1 $end
$var wire 1 1& m2 $end
$var wire 1 2& op1 $end
$var wire 1 3& op2 $end
$var wire 1 4& op3 $end
$var wire 1 5& op4 $end
$var wire 2 6& operation [1:0] $end
$var wire 1 7& src1 $end
$var wire 1 8& src2 $end
$var reg 1 9& result $end
$upscope $end
$upscope $end
$scope begin label[29] $end
$scope module alun $end
$var wire 1 :& A_invert $end
$var wire 1 ;& B_invert $end
$var wire 1 <& cin $end
$var wire 1 =& cout $end
$var wire 1 >& eq $end
$var wire 1 ?& less $end
$var wire 1 @& m1 $end
$var wire 1 A& m2 $end
$var wire 1 B& op1 $end
$var wire 1 C& op2 $end
$var wire 1 D& op3 $end
$var wire 1 E& op4 $end
$var wire 2 F& operation [1:0] $end
$var wire 1 G& src1 $end
$var wire 1 H& src2 $end
$var reg 1 I& result $end
$upscope $end
$upscope $end
$scope begin label[30] $end
$scope module alun $end
$var wire 1 J& A_invert $end
$var wire 1 K& B_invert $end
$var wire 1 L& cin $end
$var wire 1 M& cout $end
$var wire 1 N& eq $end
$var wire 1 O& less $end
$var wire 1 P& m1 $end
$var wire 1 Q& m2 $end
$var wire 1 R& op1 $end
$var wire 1 S& op2 $end
$var wire 1 T& op3 $end
$var wire 1 U& op4 $end
$var wire 2 V& operation [1:0] $end
$var wire 1 W& src1 $end
$var wire 1 X& src2 $end
$var reg 1 Y& result $end
$upscope $end
$upscope $end
$scope module alu0 $end
$var wire 1 Z& A_invert $end
$var wire 1 [& B_invert $end
$var wire 1 \& cin $end
$var wire 1 ]& cout $end
$var wire 1 ^& eq $end
$var wire 1 F equal $end
$var wire 1 O less $end
$var wire 1 _& m1 $end
$var wire 1 `& m2 $end
$var wire 1 a& op1 $end
$var wire 1 b& op2 $end
$var wire 1 c& op3 $end
$var wire 1 d& op4 $end
$var wire 2 e& operation [1:0] $end
$var wire 1 f& src1 $end
$var wire 1 g& src2 $end
$var reg 1 h& result $end
$upscope $end
$scope module alu_31 $end
$var wire 1 i& A_invert $end
$var wire 1 j& B_invert $end
$var wire 1 k& cin $end
$var wire 1 C cout $end
$var wire 1 l& eq $end
$var wire 1 m& less $end
$var wire 1 n& m1 $end
$var wire 1 o& m2 $end
$var wire 1 p& op1 $end
$var wire 1 q& op2 $end
$var wire 1 r& op3 $end
$var wire 1 s& op4 $end
$var wire 2 t& operation [1:0] $end
$var wire 1 B overflow $end
$var wire 1 u& src1 $end
$var wire 1 v& src2 $end
$var reg 1 w& result $end
$var reg 1 I set $end
$upscope $end
$upscope $end
$upscope $end
$scope module Adder1 $end
$var wire 32 x& src2_i [31:0] $end
$var wire 32 y& sum_o [31:0] $end
$var wire 32 z& src1_i [31:0] $end
$var reg 32 {& sum_in_o [31:0] $end
$upscope $end
$scope module Adder2 $end
$var wire 32 |& src1_i [31:0] $end
$var wire 32 }& sum_o [31:0] $end
$var wire 32 ~& src2_i [31:0] $end
$var reg 32 !' sum_in_o [31:0] $end
$upscope $end
$scope module Decoder $end
$var wire 1 5 ALUSrc_o $end
$var wire 3 "' ALU_op_o [2:0] $end
$var wire 1 4 Branch_o $end
$var wire 1 . RegDst_o $end
$var wire 1 - RegWrite_o $end
$var wire 6 #' instr_op_i [5:0] $end
$var reg 1 $' ALUSrc_in_o $end
$var reg 3 %' ALU_op_in_o [2:0] $end
$var reg 1 4 Branch_in_o $end
$var reg 1 &' RegDst_in_o $end
$var reg 1 '' RegWrite_in_o $end
$upscope $end
$scope module IM $end
$var wire 32 (' pc_addr_i [31:0] $end
$var reg 32 )' instr_o [31:0] $end
$var integer 32 *' i [31:0] $end
$upscope $end
$scope module Mux_ALUSrc $end
$var wire 32 +' data_o [31:0] $end
$var wire 1 5 select_i $end
$var wire 32 ,' data1_i [31:0] $end
$var wire 32 -' data0_i [31:0] $end
$var reg 32 .' data_in_o [31:0] $end
$upscope $end
$scope module Mux_PC_Source $end
$var wire 32 /' data0_i [31:0] $end
$var wire 32 0' data1_i [31:0] $end
$var wire 32 1' data_o [31:0] $end
$var wire 1 " select_i $end
$var reg 32 2' data_in_o [31:0] $end
$upscope $end
$scope module Mux_Write_Reg $end
$var wire 5 3' data0_i [4:0] $end
$var wire 5 4' data1_i [4:0] $end
$var wire 5 5' data_o [4:0] $end
$var wire 1 . select_i $end
$var reg 5 6' data_in_o [4:0] $end
$upscope $end
$scope module PC $end
$var wire 1 ! clk_i $end
$var wire 32 7' pc_in_i [31:0] $end
$var wire 1 # rst_i $end
$var reg 32 8' pc_out_o [31:0] $end
$upscope $end
$scope module RF $end
$var wire 5 9' RDaddr_i [4:0] $end
$var wire 5 :' RSaddr_i [4:0] $end
$var wire 32 ;' RSdata_o [31:0] $end
$var wire 5 <' RTaddr_i [4:0] $end
$var wire 32 =' RTdata_o [31:0] $end
$var wire 1 - RegWrite_i $end
$var wire 1 ! clk_i $end
$var wire 1 # rst_i $end
$var wire 32 >' RDdata_i [31:0] $end
$upscope $end
$scope module SE $end
$var wire 3 ?' alu_op [2:0] $end
$var wire 16 @' data_i [15:0] $end
$var wire 32 A' data_o [31:0] $end
$var reg 32 B' data_in_o [31:0] $end
$upscope $end
$scope module Shifter_l_2 $end
$var wire 32 C' data_i [31:0] $end
$var wire 32 D' data_o [31:0] $end
$upscope $end
$scope module equal_confirm $end
$var wire 1 $ data0_i $end
$var wire 1 E' data1_i $end
$var wire 1 % data_o $end
$var wire 1 F' select_i $end
$var reg 1 % data_in_o $end
$upscope $end
$scope module result_confirm $end
$var wire 32 G' data0_i [31:0] $end
$var wire 32 H' data_o [31:0] $end
$var wire 1 I' select_i $end
$var wire 32 J' data1_i [31:0] $end
$var reg 32 K' data_in_o [31:0] $end
$upscope $end
$scope module shifter32 $end
$var wire 32 L' s_result [31:0] $end
$var wire 5 M' shamt [4:0] $end
$var wire 4 N' shift_crtl [3:0] $end
$var wire 32 O' src_1 [31:0] $end
$var wire 32 P' src_2 [31:0] $end
$var wire 32 Q' src_signex [31:0] $end
$var reg 32 R' s_in_result [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx R'
bx Q'
bx P'
bx O'
bx N'
bx M'
bx L'
bx K'
bx J'
xI'
bx H'
bx G'
xF'
xE'
bx00 D'
bx C'
bx B'
bx A'
bx @'
bx ?'
bx >'
bx ='
bx <'
bx ;'
bx :'
bx 9'
bx 8'
bx 7'
bx 6'
bx 5'
bx 4'
bx 3'
bx 2'
bx 1'
bx 0'
bx /'
bx .'
bx -'
bx ,'
bx +'
b100000 *'
bx )'
bx ('
x''
x&'
bx %'
x$'
bx #'
bx "'
bx !'
bx00 ~&
bx }&
bx |&
bx {&
bx z&
bx y&
b100 x&
xw&
xv&
xu&
bx t&
0s&
xr&
xq&
xp&
xo&
xn&
0m&
xl&
xk&
xj&
xi&
xh&
xg&
xf&
bx e&
xd&
xc&
xb&
xa&
x`&
x_&
x^&
x]&
x\&
x[&
xZ&
xY&
xX&
xW&
bx V&
0U&
xT&
xS&
xR&
xQ&
xP&
0O&
xN&
xM&
xL&
xK&
xJ&
xI&
xH&
xG&
bx F&
0E&
xD&
xC&
xB&
xA&
x@&
0?&
x>&
x=&
x<&
x;&
x:&
x9&
x8&
x7&
bx 6&
05&
x4&
x3&
x2&
x1&
x0&
0/&
x.&
x-&
x,&
x+&
x*&
x)&
x(&
x'&
bx &&
0%&
x$&
x#&
x"&
x!&
x~%
0}%
x|%
x{%
xz%
xy%
xx%
xw%
xv%
xu%
bx t%
0s%
xr%
xq%
xp%
xo%
xn%
0m%
xl%
xk%
xj%
xi%
xh%
xg%
xf%
xe%
bx d%
0c%
xb%
xa%
x`%
x_%
x^%
0]%
x\%
x[%
xZ%
xY%
xX%
xW%
xV%
xU%
bx T%
0S%
xR%
xQ%
xP%
xO%
xN%
0M%
xL%
xK%
xJ%
xI%
xH%
xG%
xF%
xE%
bx D%
0C%
xB%
xA%
x@%
x?%
x>%
0=%
x<%
x;%
x:%
x9%
x8%
x7%
x6%
x5%
bx 4%
03%
x2%
x1%
x0%
x/%
x.%
0-%
x,%
x+%
x*%
x)%
x(%
x'%
x&%
x%%
bx $%
0#%
x"%
x!%
x~$
x}$
x|$
0{$
xz$
xy$
xx$
xw$
xv$
xu$
xt$
xs$
bx r$
0q$
xp$
xo$
xn$
xm$
xl$
0k$
xj$
xi$
xh$
xg$
xf$
xe$
xd$
xc$
bx b$
0a$
x`$
x_$
x^$
x]$
x\$
0[$
xZ$
xY$
xX$
xW$
xV$
xU$
xT$
xS$
bx R$
0Q$
xP$
xO$
xN$
xM$
xL$
0K$
xJ$
xI$
xH$
xG$
xF$
xE$
xD$
xC$
bx B$
0A$
x@$
x?$
x>$
x=$
x<$
0;$
x:$
x9$
x8$
x7$
x6$
x5$
x4$
x3$
bx 2$
01$
x0$
x/$
x.$
x-$
x,$
0+$
x*$
x)$
x($
x'$
x&$
x%$
x$$
x#$
bx "$
0!$
x~#
x}#
x|#
x{#
xz#
0y#
xx#
xw#
xv#
xu#
xt#
xs#
xr#
xq#
bx p#
0o#
xn#
xm#
xl#
xk#
xj#
0i#
xh#
xg#
xf#
xe#
xd#
xc#
xb#
xa#
bx `#
0_#
x^#
x]#
x\#
x[#
xZ#
0Y#
xX#
xW#
xV#
xU#
xT#
xS#
xR#
xQ#
bx P#
0O#
xN#
xM#
xL#
xK#
xJ#
0I#
xH#
xG#
xF#
xE#
xD#
xC#
xB#
xA#
bx @#
0?#
x>#
x=#
x<#
x;#
x:#
09#
x8#
x7#
x6#
x5#
x4#
x3#
x2#
x1#
bx 0#
0/#
x.#
x-#
x,#
x+#
x*#
0)#
x(#
x'#
x&#
x%#
x$#
x##
x"#
x!#
bx ~"
0}"
x|"
x{"
xz"
xy"
xx"
0w"
xv"
xu"
xt"
xs"
xr"
xq"
xp"
xo"
bx n"
0m"
xl"
xk"
xj"
xi"
xh"
0g"
xf"
xe"
xd"
xc"
xb"
xa"
x`"
x_"
bx ^"
0]"
x\"
x["
xZ"
xY"
xX"
0W"
xV"
xU"
xT"
xS"
xR"
xQ"
xP"
xO"
bx N"
0M"
xL"
xK"
xJ"
xI"
xH"
0G"
xF"
xE"
xD"
xC"
xB"
xA"
x@"
x?"
bx >"
0="
x<"
x;"
x:"
x9"
x8"
07"
x6"
x5"
x4"
x3"
x2"
x1"
x0"
x/"
bx ."
0-"
x,"
x+"
x*"
x)"
x("
0'"
x&"
x%"
x$"
x#"
x""
x!"
x~
x}
bx |
0{
xz
xy
xx
xw
xv
0u
xt
xs
xr
xq
xp
xo
xn
xm
bx l
0k
xj
xi
xh
xg
xf
0e
xd
xc
xb
xa
x`
x_
x^
x]
bx \
0[
xZ
xY
xX
xW
xV
0U
xT
xS
xR
xQ
xP
xO
bx N
bxz M
bx L
b0z K
bx J
xI
bx H
bx G
zF
bx E
bx D
xC
xB
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
x5
x4
bx 3
bx 2
bx 1
bx 0
bx /
x.
x-
bx ,
bx +
bx00 *
bx )
bx (
bx '
bx &
x%
x$
0#
x"
0!
$end
#5
b10010000 0
b10010000 }&
b10010000 0'
b10010000 !'
0B
1d&
1O
1I
1w&
0C
1r&
0k&
1Y&
0M&
1T&
0L&
1I&
0=&
1D&
0<&
19&
0-&
14&
0,&
1)&
0{%
1$&
0z%
1w%
0k%
1r%
0j%
1g%
0[%
1b%
0Z%
1W%
0K%
1R%
0J%
1G%
0;%
1B%
0:%
17%
0+%
12%
0*%
1'%
0y$
1"%
0x$
1u$
0i$
1p$
0h$
1e$
0Y$
1`$
0X$
1U$
0I$
1P$
0H$
1E$
09$
1@$
08$
15$
0)$
10$
0($
1%$
0w#
1~#
0v#
1s#
0g#
1n#
0f#
1c#
0W#
1^#
0V#
1S#
0G#
1N#
0F#
1C#
07#
1>#
06#
13#
0'#
1.#
0&#
1##
0u"
1|"
0t"
1q"
0e"
1l"
0d"
1a"
0U"
1\"
0T"
1Q"
0E"
1L"
0D"
1A"
05"
1<"
04"
11"
0%"
1,"
0$"
1!"
0s
1z
0r
1o
0c
1j
0b
1_
0S
1Z
0%
1E'
0R
0$
b11111111111111111111111111111111 '
b11111111111111111111111111111111 >'
b11111111111111111111111111111111 H'
b11111111111111111111111111111111 K'
b0z M
0]&
b11111111111111111111111111111111 8
b11111111111111111111111111111111 A
b11111111111111111111111111111111 J
b11111111111111111111111111111111 G'
1h&
1c&
0X
1Y
1T
0h
1i
1d
0x
1y
1t
0*"
1+"
1&"
0:"
1;"
16"
0J"
1K"
1F"
0Z"
1["
1V"
0j"
1k"
1f"
0z"
1{"
1v"
0,#
1-#
1(#
0<#
1=#
18#
0L#
1M#
1H#
0\#
1]#
1X#
0l#
1m#
1h#
0|#
1}#
1x#
0.$
1/$
1*$
0>$
1?$
1:$
0N$
1O$
1J$
0^$
1_$
1Z$
0n$
1o$
1j$
0~$
1!%
1z$
00%
11%
1,%
0@%
1A%
1<%
0P%
1Q%
1L%
0`%
1a%
1\%
0p%
1q%
1l%
0"&
1#&
1|%
02&
13&
1.&
0B&
1C&
1>&
0R&
1S&
1N&
0a&
0b&
0^&
0p&
1q&
b11111111111111111111111111111110 L
1l&
1V
0W
0f
1g
0v
1w
0("
1)"
08"
19"
0H"
1I"
0X"
1Y"
0h"
1i"
0x"
1y"
0*#
1+#
0:#
1;#
0J#
1K#
0Z#
1[#
0j#
1k#
0z#
1{#
0,$
1-$
0<$
1=$
0L$
1M$
0\$
1]$
0l$
1m$
0|$
1}$
0.%
1/%
0>%
1?%
0N%
1O%
0^%
1_%
0n%
1o%
0~%
1!&
00&
11&
0@&
1A&
0P&
1Q&
0_&
0`&
0n&
1o&
b10001100 *
b10001100 ~&
b10001100 D'
0P
1Q
b10 \
0`
1a
b10 l
0p
1q
b10 |
0""
1#"
b10 ."
02"
13"
b10 >"
0B"
1C"
b10 N"
0R"
1S"
b10 ^"
0b"
1c"
b10 n"
0r"
1s"
b10 ~"
0$#
1%#
b10 0#
04#
15#
b10 @#
0D#
1E#
b10 P#
0T#
1U#
b10 `#
0d#
1e#
b10 p#
0t#
1u#
b10 "$
0&$
1'$
b10 2$
06$
17$
b10 B$
0F$
1G$
b10 R$
0V$
1W$
b10 b$
0f$
1g$
b10 r$
0v$
1w$
b10 $%
0(%
1)%
b10 4%
08%
19%
b10 D%
0H%
1I%
b10 T%
0X%
1Y%
b10 d%
0h%
1i%
b10 t%
0x%
1y%
b10 &&
0*&
1+&
b10 6&
0:&
1;&
b10 F&
0J&
1K&
b10 V&
0Z&
1[&
1\&
b10 e&
0i&
1j&
b10 t&
0I'
b100 2
b100 1'
b100 7'
b100 2'
b100011 (
b100011 ,'
b100011 A'
b100011 B'
b100011 C'
b100011 Q'
b110 7
b110 :
b110 =
b110 >
b110 E
b110 N'
b100 1
b100 y&
b100 |&
b100 /'
b100 {&
0v&
1g&
0X&
0H&
08&
0(&
0v%
0f%
0V%
0F%
06%
0&%
0t$
0d$
0T$
0D$
04$
0$$
0r#
0b#
0R#
0B#
02#
0"#
0p"
0`"
0P"
0@"
00"
0~
0n
1^
b11 9
b11 ?
b11 G
b11 +'
b11 .'
0"
1-
1''
05
0$'
b100 6
b100 <
b100 D
b100 N
b100 "'
b100 ?'
b100 %'
1.
1&'
04
0u&
0f&
0W&
0G&
07&
0'&
0u%
0e%
0U%
0E%
05%
0%%
0s$
0c$
0S$
0C$
03$
0#$
0q#
0a#
0Q#
0A#
01#
0!#
0o"
0_"
0O"
0?"
0/"
0}
0m
1]
b0 &
b0 5'
b0 9'
b0 6'
0F'
b0 M'
b100011 @'
b100011 ;
b0 #'
b11 +
b11 -'
b11 ='
b11 P'
b11 <'
b10 ,
b10 @
b10 H
b10 ;'
b10 O'
b10 :'
b0 4'
b11 3'
b10000110000000000100011 3
b10000110000000000100011 )'
b0 /
b0 z&
b0 ('
b0 8'
1!
#10
0!
1#
#15
b10000010010100 0
b10000010010100 }&
b10000010010100 0'
b10000010010100 !'
b10000010001100 *
b10000010001100 ~&
b10000010001100 D'
b1000 2
b1000 1'
b1000 7'
b1000 2'
b100000100011 (
b100000100011 ,'
b100000100011 A'
b100000100011 B'
b100000100011 C'
b100000100011 Q'
b1000 1
b1000 y&
b1000 |&
b1000 /'
b1000 {&
0d&
0O
0I
0w&
1C
0r&
0B
1k&
0Y&
1M&
0T&
1L&
0I&
1=&
0D&
1<&
09&
1-&
04&
1,&
0)&
1{%
0$&
1z%
0w%
1k%
0r%
1j%
0g%
1[%
0b%
1Z%
0W%
1K%
0R%
1J%
0G%
1;%
0B%
1:%
07%
1+%
02%
1*%
0'%
1y$
0"%
1x$
0u$
1i$
0p$
1h$
0e$
1Y$
0`$
1X$
0U$
1I$
0P$
1H$
0E$
19$
0@$
18$
05$
1)$
00$
1($
0%$
1w#
0~#
1v#
0s#
1g#
0n#
1f#
0c#
1W#
0^#
1V#
0S#
1G#
0N#
1F#
0C#
17#
0>#
16#
03#
1'#
0.#
1&#
0##
1u"
0|"
1t"
0q"
1e"
0l"
1d"
0a"
1U"
0\"
1T"
0Q"
1E"
0L"
1D"
0A"
15"
1b
0<"
1S
14"
01"
1%"
1R
0,"
1o
1j
1]&
1$"
b100 '
b100 >'
b100 H'
b100 K'
0i
0d
0h&
0c&
0!"
0z
b1111111111111111111111111111011z M
1s
b100 8
b100 A
b100 J
b100 G'
0_
0Z
0g
1W
1b&
1^&
1x
0t
1Y
b11111111111111111111111111110011 L
1T
1n
0^
1_&
1v
0V
b101 9
b101 ?
b101 G
b101 +'
b101 .'
1f&
1}
0]
b1 &
b1 5'
b1 9'
b1 6'
b100000100011 @'
b101 +
b101 -'
b101 ='
b101 P'
b101 <'
b1001 ,
b1001 @
b1001 H
b1001 ;'
b1001 O'
b1001 :'
b1 4'
b101 3'
b1001001010000100000100011 3
b1001001010000100000100011 )'
b100 /
b100 z&
b100 ('
b100 8'
1!
#20
0!
#25
b10110000010011000 0
b10110000010011000 }&
b10110000010011000 0'
b10110000010011000 !'
b10110000010001100 *
b10110000010001100 ~&
b10110000010001100 D'
b1100 2
b1100 1'
b1100 7'
b1100 2'
b101100000100011 (
b101100000100011 ,'
b101100000100011 A'
b101100000100011 B'
b101100000100011 C'
b101100000100011 Q'
b1100 1
b1100 y&
b1100 |&
b1100 /'
b1100 {&
0k&
0L&
0<&
0,&
0z%
0j%
0Z%
0J%
0:%
0*%
0x$
0h$
0X$
0H$
08$
0($
0v#
0f#
0V#
0F#
06#
0&#
0t"
0d"
0T"
0D"
04"
0b
0d&
0O
0C
0M&
0=&
0-&
0{%
0k%
0[%
0K%
0;%
0+%
0y$
0i$
0Y$
0I$
09$
0)$
0w#
0g#
0W#
0G#
07#
0'#
0u"
0e"
0U"
0E"
05"
0%"
0S
0R
0r
0I
0w&
0r&
0Y&
0T&
0I&
0D&
09&
04&
0)&
0$&
0w%
0r%
0g%
0b%
0W%
0R%
0G%
0B%
07%
02%
0'%
0"%
0u$
0p$
0e$
0`$
0U$
0P$
0E$
0@$
05$
00$
0%$
0~#
0s#
0n#
0c#
0^#
0S#
0N#
0C#
0>#
03#
0.#
0##
0|"
0q"
0l"
0a"
0\"
0Q"
0L"
0A"
0<"
0_
0Z
0]&
0$"
b101 '
b101 >'
b101 H'
b101 K'
0c
0q&
0l&
0S&
0N&
0C&
0>&
03&
0.&
0#&
0|%
0q%
0l%
0a%
0\%
0Q%
0L%
0A%
0<%
01%
0,%
0!%
0z$
0o$
0j$
0_$
0Z$
0O$
0J$
0?$
0:$
0/$
0*$
0}#
0x#
0m#
0h#
0]#
0X#
0M#
0H#
0=#
08#
0-#
0(#
0{"
0v"
0k"
0f"
0["
0V"
0K"
0F"
0;"
06"
0+"
0&"
0y
0Y
0T
1h&
1c&
0!"
0z
b0z M
0s
b101 8
b101 A
b101 J
b101 G'
1o
1j
0o&
0Q&
0A&
01&
0!&
0o%
0_%
0O%
0?%
0/%
0}$
0m$
0]$
0M$
0=$
0-$
0{#
0k#
0[#
0K#
0;#
0+#
0y"
0i"
0Y"
0I"
09"
0)"
0w
0W
0b&
0^&
0x
0t
1i
b100 L
1d
1v&
1X&
1H&
18&
1(&
1v%
1f%
1V%
1F%
16%
1&%
1t$
1d$
1T$
1D$
14$
1$$
1r#
1b#
1R#
1B#
12#
1"#
1p"
1`"
1P"
1@"
10"
1~
1^
0_&
0v
1f
b11111111111111111111111111111111 9
b11111111111111111111111111111111 ?
b11111111111111111111111111111111 G
b11111111111111111111111111111111 +'
b11111111111111111111111111111111 .'
0f&
0}
1m
b1011 &
b1011 5'
b1011 9'
b1011 6'
b101100000100011 @'
b11111111111111111111111111111111 +
b11111111111111111111111111111111 -'
b11111111111111111111111111111111 ='
b11111111111111111111111111111111 P'
b0 <'
b100 ,
b100 @
b100 H
b100 ;'
b100 O'
b1 :'
b1011 4'
b0 3'
b1000000101100000100011 3
b1000000101100000100011 )'
b1000 /
b1000 z&
b1000 ('
b1000 8'
1!
#30
0!
#35
b10000 0
b10000 }&
b10000 0'
b10000 !'
b0 *
b0 ~&
b0 D'
b10000 2
b10000 1'
b10000 7'
b10000 2'
b0 (
b0 ,'
b0 A'
b0 B'
b0 C'
b0 Q'
b10000 1
b10000 y&
b10000 |&
b10000 /'
b10000 {&
1%
0E'
1$
1C
0B
1k&
1M&
1L&
1=&
1<&
1-&
1,&
1{%
1z%
1k%
1j%
1[%
1Z%
1K%
1J%
1;%
1:%
1+%
1*%
1y$
1x$
1i$
1h$
1Y$
1X$
1I$
1H$
19$
18$
1)$
1($
1w#
1v#
1g#
1f#
1W#
1V#
1G#
1F#
17#
16#
1'#
1&#
1u"
1t"
1e"
1d"
1U"
1T"
1E"
1D"
15"
14"
1%"
1$"
1s
1r
0o
1c
0j
1b
1S
1R
0d&
0O
b1111111111111111111111111111111z M
1]&
b0 '
b0 >'
b0 H'
b0 K'
0I
0w&
0r&
0h&
0c&
0Y&
0T&
0I&
0D&
09&
04&
0)&
0$&
0w%
0r%
0g%
0b%
0W%
0R%
0G%
0B%
07%
02%
0'%
0"%
0u$
0p$
0e$
0`$
0U$
0P$
0E$
0@$
05$
00$
0%$
0~#
0s#
0n#
0c#
0^#
0S#
0N#
0C#
0>#
03#
0.#
0##
0|"
0q"
0l"
0a"
0\"
0Q"
0L"
0A"
0<"
01"
0,"
0!"
0z
b0 8
b0 A
b0 J
b0 G'
0_
0Z
1q&
1l&
1b&
1^&
1S&
1N&
1C&
1>&
13&
1.&
1#&
1|%
1q%
1l%
1a%
1\%
1Q%
1L%
1A%
1<%
11%
1,%
1!%
1z$
1o$
1j$
1_$
1Z$
1O$
1J$
1?$
1:$
1/$
1*$
1}#
1x#
1m#
1h#
1]#
1X#
1M#
1H#
1=#
18#
1-#
1(#
1{"
1v"
1k"
1f"
1["
1V"
1K"
1F"
1;"
16"
1+"
1&"
1y
1t
1Y
b11111111111111111111111111111111 L
1T
1n&
1_&
1P&
1@&
10&
1~%
1n%
1^%
1N%
1>%
1.%
1|$
1l$
1\$
1L$
1<$
1,$
1z#
1j#
1Z#
1J#
1:#
1*#
1x"
1h"
1X"
1H"
18"
1("
1v
1V
1u&
1f&
1W&
1G&
17&
1'&
1u%
1e%
1U%
1E%
15%
1%%
1s$
1c$
1S$
1C$
13$
1#$
1q#
1a#
1Q#
1A#
11#
1!#
1o"
1_"
1O"
1?"
1/"
1}
1]
b0 &
b0 5'
b0 9'
b0 6'
b0 @'
b0 ;
b11111111111111111111111111111111 ,
b11111111111111111111111111111111 @
b11111111111111111111111111111111 H
b11111111111111111111111111111111 ;'
b11111111111111111111111111111111 O'
b0 :'
b0 4'
b0 3
b0 )'
b1100 /
b1100 z&
b1100 ('
b1100 8'
1!
#40
0!
#45
b10100 0
b10100 }&
b10100 0'
b10100 !'
b10100 2
b10100 1'
b10100 7'
b10100 2'
b10100 1
b10100 y&
b10100 |&
b10100 /'
b10100 {&
1o&
1`&
1Q&
1A&
11&
1!&
1o%
1_%
1O%
1?%
1/%
1}$
1m$
1]$
1M$
1=$
1-$
1{#
1k#
1[#
1K#
1;#
1+#
1y"
1i"
1Y"
1I"
19"
1)"
1w
1g
1W
0n&
0_&
0P&
0@&
00&
0~%
0n%
0^%
0N%
0>%
0.%
0|$
0l$
0\$
0L$
0<$
0,$
0z#
0j#
0Z#
0J#
0:#
0*#
0x"
0h"
0X"
0H"
08"
0("
0v
0f
0V
0v&
0g&
0X&
0H&
08&
0(&
0v%
0f%
0V%
0F%
06%
0&%
0t$
0d$
0T$
0D$
04$
0$$
0r#
0b#
0R#
0B#
02#
0"#
0p"
0`"
0P"
0@"
00"
0~
0n
0^
0u&
0f&
0W&
0G&
07&
0'&
0u%
0e%
0U%
0E%
05%
0%%
0s$
0c$
0S$
0C$
03$
0#$
0q#
0a#
0Q#
0A#
01#
0!#
0o"
0_"
0O"
0?"
0/"
0}
0m
0]
b0 9
b0 ?
b0 G
b0 +'
b0 .'
b10000 /
b10000 z&
b10000 ('
b10000 8'
b0 ,
b0 @
b0 H
b0 ;'
b0 O'
b0 +
b0 -'
b0 ='
b0 P'
1!
